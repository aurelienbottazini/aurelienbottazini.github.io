#+BEGIN_HTML
---
layout: notes
---
#+END_HTML
#+TOC: headlines 4

C provides no operation to deal directly with composite objects such
as character strings, sets, lists, or arrays.
The is no heap or garbage collection.
You need to explicitly use functions provided by most C
implementations.

* Starting Out

** Main
  Programs begin executing at the start of main. Every program must
  have a main somewhere.

#+BEGIN_SRC C
  #include <stdio.h>
  main ()
  {
    printf("hello, world\n");
  }
#+END_SRC

** Data types

   + ~char~ :: a single byte. A character written between single
               quotes represents an integer value equal to the
               numerical value of the character in the machineâ€™s
               character set. It is called a /character constant/. It
               is another way to write a small integer. ~char~
               variables and constants are identical to ~int~ in
               arithmetic expressions. With ASCII, ~A~ value is 65.

               #+BEGIN_SRC C
                 if (c >= '0' && c <= '9')
               #+END_SRC

               Determines whether the character in ~c~ is a digit. The
               numeric value of that digit is
               #+BEGIN_SRC C
                 c - '0'
               #+END_SRC

   + ~int~ :: at least 16 bits (-32768 and +32767). 32 bits on some machine.
   + ~short~ :: short integer
   + ~long~ :: at least 32 bits
   + ~float~
   + ~double~

     Integer division truncates.

   #+BEGIN_SRC C :exports both
     float f = 5/2;
     printf("%f", f);
   #+END_SRC

   #+RESULTS:
   : 2.0

   #+BEGIN_SRC C
   n1 = nw = nc = 0;
   #+END_SRC

   Sets all variables to 0 because assignment is an expression with a value.


   By convention, a string constant ends with ~\0~ to mark the end.

*** ~++~ and ~--~
    To decrement ~--n~ and increment ~++n~ by 1. More concise and often efficient
    than ~n = n + 1~

*** ~||~ and ~&&~
    Evaluate from left to right and stop as soon as the truth or
    falsehood is known.

** Symbolic constants
   ~#define~ defines a symbolic name or symbolic constant. They are
   conventionally written in UPPER CASE.

   #+BEGIN_SRC C
     #define LOWER 0
     #define UPPER 300
   #+END_SRC

** Character Input and Output
*** ~printf~ & ~scanf~

    First argument is a string of characters to be printed. Each ~%~
    indicating where one of the other arguments is to be substituted.

    #+BEGIN_SRC C
      printf("%d\t%d\n", 93, 24);
    #+END_SRC

    #+RESULTS:
    | 93 | 24 |


    Parameters examples
   + ~%d~ :: decimal integer
   + ~%6d~ :: decimal integer, 6 characters wide
   + ~f~ :: float
   + ~%6.2f~ :: float with 2 characters after decimal point and 6
                characters wide

   ~scanf~ is like ~printf~ except that it reads input instead of
   writing output.
*** ~getchar~ and ~putchar~
    One character at a time

    #+BEGIN_SRC C :exports both
      putchar('c');
    #+END_SRC

    #+RESULTS:
    : c

    ~getchar~ returns ~EOF~ where there is no more input. We use ~int~
    to hold values from ~getchar~ because ~EOF~ is not big enough to
    hold ~EOF~

    #+BEGIN_SRC C
      c = getchar()
    #+END_SRC

    Since ~getchar~ has a value it can be used inside larger
    expression

    #+BEGIN_SRC C
      #include <stdio.h>
      main()
      {
        int c;
        whil`````````````e ((c = getchar()) != EOF)
          putchar(c);
      }
    #+END_SRC
** Functions
   A function does not need to return a value.
   A function returns 0 upon normal termination.

   #+BEGIN_SRC C
     int power(int, int);
   #+END_SRC
   This is a function prototype. Parameters names are optional in
   function prototype. But well-chosen names are *good documentation*.

   All function arguments are /passed by value/. It means the function
   uses temporary variables instead of the originals. *This is
   different with arrays*. The value passed is the location of the
   address of the beginning of the array. There is no copying of array
   elements.
** External variables

   An external variable must be defined exactly once. The variable
   must also be declared in each function that wants to access it.

   #+BEGIN_SRC C
     int max;

     main()
     {
       extern int max;
     }
   #+END_SRC

   The ~extern~ declaration can be omitted it the definition of the
   external variable occurs in the source file before the use in a
   particular function.
   A common practice is to place all external variables at the beginning
   of the source file and then omit all ~extern~ declarations.
   The usual practice is to collect all ~extern~ declarations of
   variables and functions in a separate file, an /header/ file.
