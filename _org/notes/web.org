#+BEGIN_HTML
---
layout: notes
---
#+END_HTML
#+TOC: headlines 4

* [[http://bkaprt.com/rwd/3/][“A Dao of Web Design”]]
  We should embrace the fact that the web doesn’t have the same
  constraints, and design for this flexibility. This means pages which
  adapt to the needs of a reader, whose eyesight is less than perfect,
  and who wishes to read pages with a very large font size.
* Consistent baseline
  I like [[https://necolas.github.io/normalize.css/][Normalize]] to get consistent CSS styles across all browsers.
* Header
  #+BEGIN_SRC html
    <!DOCTYPE html>
    <head>
        <meta charset="UTF-8">
        <!-- browsers assume type="text/javascript" -->
        <script src="file.js"></script>
        <!-- browsers assume type="text/css" -->
        <link rel="stylesheet" href="file.css">
    </head>
  #+END_SRC

** View-port
  Introduced by apple to set rendering width for mobile browsers

  Fixed width
#+BEGIN_SRC html
  <meta name="viewport" content="width=320" />
#+END_SRC


  Resolution agnostic setup.
#+BEGIN_SRC html
  <meta name="viewport" content="initial-scale=1.0,
  width=device-width" />
#+END_SRC
* favicon
  https://github.com/audreyr/favicon-cheat-sheet
* Tags
  With HTML5 your tags can be uppercase, lowercase, self closing
  ~<br />~ or not ~<br>~. Attributes can be quoted or not.

  On the larger scale, don’t use HTML for presentation. No ~<font>~ or
  ~<b>~, ~<i>~ and other presentational elements. Where HTML provides an
  appropriate element, use it. Where it doesn’t, use classes.

** ~<i>~ and ~<em>~
  If the reason for italics is emphasis, why mark up your page with
  the ~<i>~ element? Use the ~<em>~ element.
  ~<i>~ means text is an alternate voice or mood.

** ~<b>~ and ~<strong>~
   ~<b>~ for stylistically offset from the normal prose without
   conveying any extra importance. If the text has any extra
   importance, use ~<strong>~.

** ~<small>~
   Represents the small print for legalese, or terms and conditions.

** ~<cite>~
   Title of a work, not a person. Feels wrong :(

** obsolete
   + ~<frame>~
   + ~<frameset>~
   + ~<noframes>~
   + ~<acronym>~. Use ~<abbr>~ instead
   + ~<font~
   + ~<big>~
   + ~<center>~
   + ~<strike>~
   + presentational attributes like ~bgcolor~, ~cellpading~,
     ~cellspacing~, ~valign~
* Canvas
  For creating dynamic images
  [[https://html.spec.whatwg.org/multipage/scripting.html#the-canvas-element][Spec]]ification

  #+BEGIN_SRC html
    <canvas id="my-first-canvas" width="360" height="240">
            <p>No canvas support? Have an old-fashioned image
            instead:</p>
            <img src="puppy.jpg" alt="a cute puppy">
    </canvas>
  #+END_SRC

  Then you interact with it with JavaScript

  #+BEGIN_SRC js
    var canvas = document.getElementById('my-first-canvas');
    var context = canvas.getContext('2d');
  #+END_SRC

* Typography
** Hyphenation
  http://meyerweb.com/eric/thoughts/2012/12/17/where-to-avoid-css-hyphenation

#+BEGIN_SRC css
  body {hyphens: auto;}
  code, var, kbd, samp, tt, dir, listing, plaintext, xmp,
  abbr, acronym, blockquote, q {hyphens: none;}
#+END_SRC

** Fonts
   Avoid using absolute font sizes, and use proportional sizes for
   headings, much more adaptable and accessible. I like to use /ems/.

   By setting the font size to 100% we set the base type to the
   browser’s default (16 in most cases).

   When you use ems you can be translate back into pixel with ~target /
   context = result~. So for example with a body size of 100% (16px),
   if we want a h1 of 24px, which value should we set for em? 24 / 16 =
   1.5em.

   This way you can translate your /Photoshop/ design font-sizes (with
   pixels) to flexible font-sizes.
* Layout
  Using percentages (or other relative values) to specify page layout
  in CSS automatically creates adaptive pages.

** Flexible grid
   We can use ~target / context = result~ to convert pixels to % in
   our designs. We can use it for width, height, margins, paddings.
   You *can* round up the result if you want.

** Responsive Web design
   http://responsivewebdesign.com/robot/

   The long and short of it is that we’re designing for more devices,
   more input types, more resolutions than ever before.

   1. A flexible, grid-based layout,
   2. Flexible images and media, and
   3. Media queries, a module from the CSS3 specification.

** Flexible Media

#+BEGIN_SRC css
  img, embed, object, video {
      max-width: 100%;
  }
#+END_SRC

  ~overflow: hidden~ is also a pretty useful property
* Media Queries
  *Design for mobile first*

  You can test with:
  + width
  + height
  + device-width
  + device-height
  + orientation (portrait and landscape)
  + aspect-ratio
  + device-aspect-ratio
  + color
  + color-index
  + monochrome
  + resolution
  + scan
  + grid

#+BEGIN_SRC css
  @media screen and (min-width: 1024px) {
      body {
            font-size: 100%;
        }
  }

  @import url("wide.css") screen and (min-width: 1024px);

  @media screen and (min-device-width: 480px) and (orientation: landscape) { }
#+END_SRC

#+BEGIN_SRC html
  <link rel="stylesheet" href="wide.css" media="screen and (min-width: 1024px)" />
#+END_SRC

  Resolutions Breakpoints:

  + 320 pixels
    For small screen devices, like phones, held in portrait mode.
  + 480 pixels
    For small screen devices, like phones, held in landscape mode.
  + 600 pixels
    Smaller tablets, like the Amazon Kindle (600×800) and Barnes & Noble Nook (600×1024), held in portrait mode.
  + 768 pixels
    Ten-inch tablets like the iPad (768×1024) held in portrait mode.
  + 1024 pixels
    Tablets like the iPad (1024×768) held in landscape mode, as well as certain laptop, netbook, and desktop displays.
  + 1200 pixels
    For wide-screen displays, primarily laptop and desktop browsers.

* Accessibility
  http://www.w3.org/WAI/PF/html-task-force
* Audio
  #+BEGIN_SRC html
    <audio src="johnny_cash_hurt.mp3" autoplay loop controls></audio>
  #+END_SRC

  ~autoplay~, ~loop~ and ~control~ are boolean attributes. Giving the
  attributed a value does not matter. It is either present or not.
  You can also use ~preload~ attribute and set it to ~none~, ~auto~
  and ~metadata~.

  You can use js to control the player.

  #+BEGIN_SRC js
    document.getElementById('player').play()
  #+END_SRC

  You can provide different format, specifying mime types help the browser.
  #+BEGIN_SRC html
    <audio controls>
        <source src="johnny_cash.ogg" type="audio/ogg">
        <source src="johnny_cash.mp3" type="audio/mpeg">
    </audio>
  #+END_SRC

  Support for browsers not supporting ~<audio>~ and not including /flash/.
  #+BEGIN_SRC html
    <audio controls>
     <source src="johnny_cash.ogg" type="audio/ogg">
     <source src="johnny_cash.mp3" type="audio/mpeg">
     <object type="application/x-shockwave-flash" »
             data="player.swf?soundFile=johnny_cash.mp3">
         <param name="movie" value="player.swf?soundFile=johnny_cash.mp3">
         <a href="johnny_cash.mp3">Download the song</a>
     </object>
    </audio>
  #+END_SRC
* Video
  ~<video>~ works like ~<audio>~. ~autoplay~, ~loop~, ~control~
  attributes. ~preload~ also available.
  You can have a placeholder image with the poster attribute.

  #+BEGIN_SRC html
    <video controls width="360" height="240" »
            poster="placeholder.jpg">
      <source src="movie.ogv" type="video/ogg">
      <source src="movie.mp4" type="video/mp4">
      <object type="application/x-shockwave-flash" »
              width="360" height="240" »
              data="player.swf?file=movie.mp4">
          <param name="movie" »
                 value="player.swf?file=movie.mp4">
          <a href="movie.mp4">Download the movie</a>
      </object>
    </video>
  #+END_SRC

  Scriptable, styleable.
* CSS
** !important
  Ignore subsequent or more specific rules, apply this one.

#+BEGIN_SRC css
  a {
      color: blue !important;
  }
#+END_SRC
* svg
** png mask for transparent jpegs
   #+BEGIN_SRC html
     <svg preserveAspectRatio="xMinYMin" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
          viewBox="0 0 560 1388">
     <defs>
     <mask id="mask">
     <image width="560" height="1388" xlink:href="img/mask.png"></image>
     </mask>
     </defs>
     <image mask="url(#mask)" id="image_masked" width="560" height="1388" xlink:href="image_to_mask.jpg"></image>
     </svg>
   #+END_SRC
