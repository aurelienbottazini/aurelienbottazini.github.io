#+BEGIN_HTML
---
layout: notes
---
#+END_HTML

/The Pragmatic Programmer From Journeyman to Master/ – Andrew Hunt and David
Thomas

This book changed the way I work. Really small notes based on my last read.
There is nice resume of all the important points already available with the book

A pragmatic programmer is

- Inquisitive -> Know how things work
- Critical Thinker
- Realistic
- Jack of all trades

Kaisen: Continuously make small improvements

Be a catalyst for change: start something and when people marvel about it say
“Of course it would be better with…”

Participate in local users group

WISDOM:
*W*hat do you want? What is their *I*nterest in what you've got to say? How
*S*ophisticated are they? How much *D*etail do they want? Whom do you want to
*O*wn the information? How can you *M*otivate them to listen to you?

Bad code requires comment -> learned this from Refactoring book and DHH

Use accessors to read and write attrs of objects -> easier to add
functionalities

Tracer bullets apply particularly to new projects

Make sure to say your prototype is meant to be disposable

When asked for an estimate say: “I'll get back to you”

Law of demeter: Any method of an object should call only methods belonging to
  - Itself
  - Objects it created
  - Any directly held component objects

Algorithm speed:
- Loops: O(n)
- Nested Loops: O(nxn)
- Binary chop: O(log(n))
- Divide and conquer: O(nlog(n))
